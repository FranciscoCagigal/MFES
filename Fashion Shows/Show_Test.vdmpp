class Show_Test is subclass of MyTestCase
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
operations
-- TODO Define operations here

			public TestShow :() ==> ()
			TestShow() ==
			(
				-- constructor
				
				dcl show : Fashion_Show := new Fashion_Show("Porto","Primavera",2017, 12, 31, 9, 00);
				dcl designer1 : Fashion_Designer := new Fashion_Designer("Andre Correia",54);
				dcl designer2 : Fashion_Designer := new Fashion_Designer("Francisco Louça",64);
				dcl designer3 : Fashion_Designer := new Fashion_Designer("Afonso Martins",58);
				dcl designer4 : Fashion_Designer := new Fashion_Designer("Carlos Silva",62);
				--dcl designer5 : Fashion_Designer := new Fashion_Designer("Mario Andrade",59);
				dcl model1 : Model := new Model("Pedro Faria",67,<Masculino>,1.78,74.32);
				dcl model2 : Model := new Model("Sara Sampaio",24,<Feminino>,1.82,53.24);
				dcl model3 : Model := new Model("Daniela Hanganu",26,<Feminino>,1.79,52.78);
				dcl model4 : Model := new Model("Dariia",23,<Feminino>,1.85,56.91);
				dcl workshop : WorkShop := new WorkShop("Como costurar um botão?", mk_Fashion_Show`Date(2017, 12, 31, 20, 00), mk_Fashion_Show`Date(2017, 12, 31, 21, 00), 20, "João Botões Correia", "A7");
				dcl workshop2 : WorkShop := new WorkShop("Como se maquilhar?", mk_Fashion_Show`Date(2017, 12, 31, 19, 00), mk_Fashion_Show`Date(2017, 12, 31, 20, 00), 20, "João Botões Correia", "A9");
				dcl user1 : Regular_User := new Regular_User("Diolinda",<Feminino>, "diolinda@gmail.com", "password_diolinda",true);
				dcl user2: Regular_User := new Regular_User("Diofeia",<Feminino>, "diofeia@gmail.com", "password_diofeia",false);
				dcl reviewer: Reviewer := new Reviewer("Ana Bacalhau",39,<Feminino>,"anabacalhau@gmail.com","password_anabacalhau");
				dcl reviewer2: Reviewer := new Reviewer("Ana Moura",45,<Feminino>,"anamoura@gmail.com","password_anamoura");
				dcl data1 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 10, 59);
				dcl data2 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 11, 59);
				dcl data3 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 12, 30);
				dcl data4 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 14, 00);
				dcl data5 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 15, 30);
				dcl data6 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 17, 00);
				dcl data7 : Fashion_Show`Date := mk_Fashion_Show`Date(2017, 12, 31, 18, 30);
				dcl critic : Fashion_Show`Critic := mk_Fashion_Show`Critic("Melhor festival de moda que participei!",5);
				dcl critic2 : Fashion_Show`Critic := mk_Fashion_Show`Critic("Evento aquém das expectativas.",2);
				
				-- gets
				assertEqual(show.getTheme(),"Primavera");
				assertEqual(show.getLocation(),"Porto");
				assertEqual(show.getDate(),mk_Fashion_Show`Date(2017, 12, 31, 9, 00));
				assertEqual(show.getModels(),{|->});
				assertEqual(show.getProgramShow(),{|->});
				
				-- get designers
				assertEqual(show.getDesigners(),{});
				show.addDesignerToShow(designer1);
				assertEqual(show.getDesigners(),{designer1});
				show.addDesignerToShow(designer2);
				assertEqual(show.getDesigners(),{designer1,designer2});
				show.rmvDesignerToShow(designer1);
				assertEqual(show.getDesigners(),{designer2});
				show.rmvDesignerToShow(designer2);
				assertEqual(show.getDesigners(),{});
				
				-- program
				show.addDesignerToProgramShow(data1,designer1);
				assertEqual(show.getProgramShow(),{data1|->designer1});
				assertEqual(card dom show.getProgramShow(),1);
				show.addDesignerToProgramShow(data2,designer2);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2});
				assertEqual(card dom show.getProgramShow(),2);
				
				--get models
				show.addDesignerToShow(designer1);
				show.addDesignerToShow(designer2);
				assertEqual(show.getModelsOfDesigner(designer1),[]);
				assertEqual(show.getModelsOfDesigner(designer2),[]);
				assertEqual(show.getModels(),{designer1|->[],designer2|->[]});
				assertEqual(show.getModelsInRunwayOfDesigner(designer1),[]);
				show.addModelToShow(designer1,model1);
				show.addModelToShow(designer1,model2);
				show.addModelToShow(designer1,model3);
				show.addModelToShow(designer2,model4);
				assertEqual(show.getModelsInRunwayOfDesigner(designer1)(1).getModel(),model1);
				assertEqual(show.getModelsInRunwayOfDesigner(designer1)(2).getModel(),model2);
				assertEqual(show.getModelsInRunwayOfDesigner(designer1)(3).getModel(),model3);
				assertEqual(show.getModelsInRunwayOfDesigner(designer2)(1).getModel(),model4);
				assertEqual(show.getModelsOfDesigner(designer1),[model1,model2,model3]);
				assertEqual(show.getModelsOfDesigner(designer2),[model4]);
				show.removeModelToShow(designer1,model2);
				assertEqual(show.getModelsOfDesigner(designer1),[model1,model3]);
				
				-- remove designers of program
				show.removeDesignerFromProgramShow(data2);
				assertEqual(show.getProgramShow(),{data1|->designer1});
				assertEqual(card dom show.getProgramShow(),1);
				show.removeDesignerFromProgramShow(data1);
				assertEqual(show.getProgramShow(),{|->});
				
				-- workshops
				assertEqual(show.getWorkShops(),{});
				show.addWorkShopToShow(workshop);
				assertEqual(show.getWorkShops(),{workshop});
				show.addWorkShopToShow(workshop2);
				assertEqual(show.getWorkShops(),{workshop,workshop2});
				assertEqual(workshop.getUsers(),{});
				show.workShopBooking(workshop, user1);
				assertEqual(workshop.getUsers(),{user1});
				show.workShopBooking(workshop, user2);
				assertEqual(workshop.getUsers(),{user1,user2});
				show.rmvWorkShopToShow(workshop);
				assertEqual(show.getWorkShops(),{workshop2});
				show.rmvWorkShopToShow(workshop2);
				assertEqual(show.getWorkShops(),{});
				
				-- program
				show.addDesignerToProgramShow(data1,designer1);
				assertEqual(show.getProgramShow(),{data1|->designer1});
				assertEqual(card dom show.getProgramShow(),1);
				show.addDesignerToProgramShow(data2,designer2);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2});
				assertEqual(card dom show.getProgramShow(),2);
				show.addDesignerToProgramShow(data3,designer3);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3});
				assertEqual(card dom show.getProgramShow(),3);
				show.addDesignerToProgramShow(data4,designer4);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4});
				assertEqual(card dom show.getProgramShow(),4);
				assertEqual(show.checkProgramDisponibility(mk_Fashion_Show`Date(2017, 12, 31, 13, 59)),false);
				
				--invalid entry (try to break pre-condition by adding another event with already existing same date)
				--show.addDesignerToProgramShow(data1,designer2);
				
				--get designers by date
				assertEqual(show.getDesignerByDate(data1),designer1);
				assertEqual(show.getDesignerByDate(data2),designer2);
				assertEqual(show.getDesignerByDate(data3),designer3);
				assertEqual(show.getDesignerByDate(data4),designer4);
				
				--add same designer to another date
				show.addDesignerToProgramShow(data5,designer1);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4,data5|->designer1});
				assertEqual(card dom show.getProgramShow(),5);
				show.addDesignerToProgramShow(data6,designer2);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4,data5|->designer1,data6|->designer2});
				assertEqual(card dom show.getProgramShow(),6);
				show.addDesignerToProgramShow(data7,designer1);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4,data5|->designer1,data6|->designer2,data7|->designer1});
				assertEqual(card dom show.getProgramShow(),7);
				
				
				--get list of dates by designer
				assertEqual(show.getListOfDatesByDesigner(designer1),{data1,data5,data7});
				assertEqual(show.getListOfDatesByDesigner(designer2),{data2,data6});
				
				--invalid entry (try to break pre-condition by retriving list of dates by a designer that not exists on program)
				--assertEqual(show.getListOfDatesByDesigner(designer5),{});
				
				--remove date from program show
				show.removeDesignerFromProgramShow(data7);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4,data5|->designer1,data6|->designer2});
				assertEqual(card dom show.getProgramShow(),6);
				show.removeDesignerFromProgramShow(data6);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4,data5|->designer1});
				assertEqual(card dom show.getProgramShow(),5);
				show.removeDesignerFromProgramShow(data5);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3,data4|->designer4});
				assertEqual(card dom show.getProgramShow(),4);
				
				--invalid entry (try to break pre-condition by removing a date that not exists on program)
				--show.removeDesignerFromProgramShow(data5);
				
				show.removeDesignerFromProgramShow(data4);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2,data3|->designer3});
				assertEqual(card dom show.getProgramShow(),3);
				
				--invalid entry (try to break pre-condition by removing a date that not exists on program)
				--show.removeDesignerFromProgramShow(data4);
				
				show.removeDesignerFromProgramShow(data3);
				assertEqual(show.getProgramShow(),{data1|->designer1,data2|->designer2});
				assertEqual(card dom show.getProgramShow(),2);
				
				show.removeDesignerFromProgramShow(data2);
				assertEqual(show.getProgramShow(),{data1|->designer1});
				assertEqual(card dom show.getProgramShow(),1);
				
				show.removeDesignerFromProgramShow(data1);
				assertEqual(show.getProgramShow(),{|->});
				
				-- critics
				assertEqual(show.getCritics(),{|->});
				assertEqual(show.getAvgReview(),0);
				show.addCritic(reviewer, critic);
				assertEqual(show.getCritics(),{reviewer|->critic});
				assertEqual(show.getAvgReview(),5);
				show.addCritic(reviewer2, critic2);
				assertEqual(show.getCritics(),{reviewer|->critic,reviewer2|->critic2});
				assertEqual(show.getAvgReview(),3.5);
				show.rmvCritic(reviewer);
				assertEqual(show.getCritics(),{reviewer2|->critic2});
				assertEqual(show.getAvgReview(),2);
				show.rmvCritic(reviewer2);
				assertEqual(show.getCritics(),{|->});
				assertEqual(show.getAvgReview(),0);
				
				--test functions
				assertEqual(show.DaysOfMonth(1,2000),31);
				assertEqual(show.DaysOfMonth(4,2000),30);
				assertEqual(show.DaysOfMonth(2,2000),29);
				assertEqual(show.DaysOfMonth(2,1900),28);
				
				return;
			);
			
			public static main_test: () ==> ()
			main_test() ==
			(
				IO`print("TestShow -> ");
				new Show_Test().TestShow();
				IO`println("Passed");
			);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Show_Test
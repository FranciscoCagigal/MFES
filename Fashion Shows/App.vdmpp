class App
types
-- TODO Define types here

			public Users = set of Regular_User;
			public Shows = set of Fashion_Show;
			public Shows_Seq = seq of Fashion_Show;
			
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here

			public users : Users := {};
			public shows : Shows := {};

operations
-- TODO Define operations here

			--Construtor
			public App: () ==> App
			App() == (
				return self;
			);
			
			--Retorna os utilizadores da aplicação
			public pure getUsers : () ==> Users
			getUsers() ==
			(
				return users;
			);
			
			--Retorna os shows da aplicação
			public pure getShows : () ==> Shows
			getShows() ==
			(
				return shows;
			);
			
			--Adiciona um utilizador à aplicação
			public addUserToApp : (Regular_User) ==> ()
			addUserToApp(User) ==
			(
				users := users union {User};
				return;
			)
			pre User not in set users
			post User in set users;
			
			--Remove um utilizador à aplicação
			public rmvUserToApp : (Regular_User) ==> ()
			rmvUserToApp(User) ==
			(
				users := users \ {User};
				return;
			)
			pre User in set users
			post User not in set users;
			
			--Adiciona um show à aplicação
			public addShowToApp : (Fashion_Show) ==> ()
			addShowToApp(Fashion_Show) ==
			(
				shows := shows union {Fashion_Show};
				return;
			)
			pre Fashion_Show not in set shows
			post Fashion_Show in set shows;
			
			--Remove um show à aplicação
			public rmvShowToApp : (Fashion_Show) ==> ()
			rmvShowToApp(Fashion_Show) ==
			(
				shows := shows \ {Fashion_Show};
				return;
			)
			pre Fashion_Show in set shows
			post Fashion_Show not in set shows;
			
			--Procura shows por tema
			public getShowsByTheme : (Fashion_Show`String) ==> Shows
			getShowsByTheme(theme) ==
			(
				dcl return_value : Shows := {};
				for all show in set shows do
					if show.getTheme() = theme then
						return_value := return_value union {show};
				return return_value;
			);
			
			--Ordenar shows por data
			public getShowsByDate : () ==> Shows_Seq
			getShowsByDate() ==
			(
				dcl return_value : Shows_Seq := [];
				dcl aux_show : [Fashion_Show] := nil;
				
				
				for all show in set shows do
					(
					for all show2 in set shows do
						(
							if((aux_show=nil or compareDates(show2.getDate(),aux_show.getDate())) and show2 not in set elems return_value ) then
								aux_show:=show2;
						);
						return_value := return_value ^ [aux_show];
						aux_show:=nil;
						);
				return return_value;
			);

functions
-- TODO Define functiones here

			-- Compara 2 datas
			public static compareDates: Fashion_Show`Date * Fashion_Show`Date -> bool
			compareDates(date1,date2) == (
				if date1.year < date2.year then
					true
				else if date1.year > date2.year then
				 false
				else if date1.month < date2.month then
					true
				else if date1.month > date2.month then
					false
				else if date1.day < date2.day then
					true
				else if date1.day > date2.day then
					false
				else if date1.hour < date2.hour then
					true
				else if date1.hour > date2.hour then
					false
				else if date1.minute < date2.minute then
					true
				else if date1.minute > date2.minute then
					false
				else
					true
			);

traces
-- TODO Define Combinatorial Test Traces here
end App
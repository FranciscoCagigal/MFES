class Fashion_Show
types
-- TODO Define types here
			public String = seq of char;
			public Date :: year : nat month: nat1 day : nat1 hour : nat minute : nat
				inv mk_Date(y,m,d,h,m) == m <= 12 and d <= DaysOfMonth(y, m) and h < 24 and m < 60;
			public Fashion_Designers = set of Fashion_Designer;
			public Models_to_Designers = map Fashion_Designer to set of Model;
			public listOfModels = set of Model;
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
			
			private location : String;
			private date : Date;
			private theme : String;
			private designers : Fashion_Designers := {};
			private models : Models_to_Designers := {|->};
			
			
operations
-- TODO Define operations here

			--Construtor
			public Fashion_Show: String * String * nat * nat1 * nat1 * nat * nat ==> Fashion_Show
			Fashion_Show(location1,theme1,year, month, day, hout, minute) == (
				location := location1;
				theme := theme1;
				date := mk_Date(year, month, day, hout, minute);	
				return self;
			);
			
			-- Retorna a localidade
			public pure getLocation : () ==> String
			getLocation() ==
			(
				return location;
			);
			
			-- Retorna o tema
			public pure getTheme : () ==> String
			getTheme() ==
			(
				return theme;
			);
			
			-- Retorna a data
			public pure getDate : () ==> Date
			getDate() ==
			(
				return date;
			);
			
			-- Retorna os designers
			public pure getDesigners : () ==> Fashion_Designers
			getDesigners() ==
			(
				return designers;
			);
			
			-- Retorna os modelos por designer
			public pure getModels : () ==> Models_to_Designers
			getModels() ==
			(
				return models;
			);
			
			-- Retorna os modelos de um dado designer
			public pure getModelsOfDesigner : (Fashion_Designer) ==> listOfModels
			getModelsOfDesigner(Fashion_Designer) ==
			(
				return models(Fashion_Designer);
			);
			
			-- Adiciona um designer ao desfile
			public addDesignerToShow : (Fashion_Designer) ==> ()
			addDesignerToShow(Fashion_Designer)==
			(
				designers := designers union {Fashion_Designer};
				models := models ++ {Fashion_Designer|->{}};
			)
			pre Fashion_Designer not in set designers
			post designers = designers~ union {Fashion_Designer};

			-- Adiciona um modelo ao designer
			public addModelToShow : Fashion_Designer * Model ==> ()
			addModelToShow(Fashion_Designer, Model)==
			(
				models(Fashion_Designer) := models(Fashion_Designer) union {Model};
			)
			pre Fashion_Designer in set designers;

functions
-- TODO Define functiones here
			
			-- Retorna o número de dias do mês num dado ano
			public static DaysOfMonth(month,year : nat1) r : nat1 == (
				if month = 1 or month = 3 or month = 5 or month = 7 or month = 8 or month = 10 or month = 12 then
					31
				else if month = 2 and ((year mod 4 = 0 and year mod 100 <> 0) or year mod 400 = 0) then
					29
				else if month = 2 then
					28
				else
					30
			)

traces
-- TODO Define Combinatorial Test Traces here
end Fashion_Show
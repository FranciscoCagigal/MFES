class Fashion_Show
types
-- TODO Define types here
			public String = seq of char;
			public Date :: year : nat month: nat1 day : nat1 hour : nat minute : nat
				inv mk_Date(y,m,d,h,min) == m <= 12 and d <= DaysOfMonth(m,y) and h < 24 and min < 60;
			public Models_to_Designers = map Fashion_Designer to seq of Model_In_Runway;
			public listOfModels = seq of Model_In_Runway;
			public listOfDesigners = set of Fashion_Designer;
			public listOfWorkshops = set of WorkShop;
			public listOfCritics = map Reviewer to Critic;
			public programShow = map Date to Fashion_Designer;
			public listOfDates = set of Date;
			public Critic :: description : String rate: nat
				inv v == v.rate <= 5;
			
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
			
			private location : String;
			private date : Date;
			private theme : String;
			private models : Models_to_Designers := {|->};
			private workshops : listOfWorkshops := {};
			private critics : listOfCritics := {|->};
			private program : programShow := {|->};
						
operations
-- TODO Define operations here

			--Construtor
			public Fashion_Show: String * String * nat * nat1 * nat1 * nat * nat ==> Fashion_Show
			Fashion_Show(location1,theme1,year, month, day, hour, minute) == (
				location := location1;
				theme := theme1;
				date := mk_Date(year, month, day, hour, minute);	
				return self;
			);
			
			-- Retorna a localidade
			public pure getLocation : () ==> String
			getLocation() ==
			(
				return location;
			);
			
			-- Retorna o tema
			public pure getTheme : () ==> String
			getTheme() ==
			(
				return theme;
			);
			
			-- Retorna a data
			public pure getDate : () ==> Date
			getDate() ==
			(
				return date;
			);
			
			-- Retorna os designers
			public pure getDesigners : () ==> listOfDesigners
			getDesigners() ==
			(
				return dom models;
			);
			
			-- Retorna os modelos por designer
			public pure getModels : () ==> Models_to_Designers
			getModels() ==
			(
				return models;
			);
			
			-- Retorna o programa do evento
			public pure getProgramShow : () ==> programShow
			getProgramShow() ==
			(
				return program;
			);
			
			-- Retorna os modelos de um dado designer
			public pure getModelsOfDesigner : (Fashion_Designer) ==> listOfModels
			getModelsOfDesigner(Fashion_Designer) ==
			(
				return models(Fashion_Designer);
			)
			pre Fashion_Designer in set dom models;
			
			-- Retorna os workshops do show
			public pure getWorkShops : () ==> listOfWorkshops
			getWorkShops() ==
			(
				return workshops;
			);
			
			-- Retorna os workshops do show
			public pure getCritics : () ==> listOfCritics
			getCritics() ==
			(
				return critics;
			);
			
			-- Adiciona um designer ao desfile
			public addDesignerToShow : (Fashion_Designer) ==> ()
			addDesignerToShow(Fashion_Designer)==
			(
				models := models ++ {Fashion_Designer|->[]};
			)
			pre Fashion_Designer not in set dom models
			post Fashion_Designer in set dom models;
			
			-- Remove um designer ao desfile
			public rmvDesignerToShow : (Fashion_Designer) ==> ()
			rmvDesignerToShow(Fashion_Designer)==
			(
				models := {Fashion_Designer} <-: models ;
			)
			pre Fashion_Designer in set dom models
			post Fashion_Designer not in set dom models;

			-- Adiciona um modelo ao designer
			public addModelToShow : Fashion_Designer * Model_In_Runway ==> ()
			addModelToShow(Fashion_Designer, Model)==
			(
				models(Fashion_Designer) := models(Fashion_Designer)^[Model];
			)
			pre Model not in set elems models(Fashion_Designer) and Fashion_Designer in set dom models and Fashion_Designer in set rng program and
				len models(Fashion_Designer) = 0 => checkModelDesignerDates(Fashion_Designer, Model) and 
				len models(Fashion_Designer) <> 0 => checkModelsDates(Fashion_Designer, Model)
			post Model in set elems models(Fashion_Designer);
			
			-- Remove um modelo do designer
			public removeModelToShow : Fashion_Designer * Model_In_Runway ==> ()
			removeModelToShow(Fashion_Designer, Model)==
			(
				dcl seqAux : listOfModels := [];
				
				for all i in set inds models(Fashion_Designer) do 
				if models(Fashion_Designer)(i) <> Model
				then seqAux := seqAux^[models(Fashion_Designer)(i)];
				
				models(Fashion_Designer) := seqAux;
			)
			pre Model in set elems models(Fashion_Designer) and Fashion_Designer in set dom models
			post Model not in set elems models(Fashion_Designer);
			
			-- Adiciona um designer ao programa
			public addDesignerToProgramShow : Date * Fashion_Designer ==> ()
			addDesignerToProgramShow(dateShow,designer)==
			(
				program := program ++ {dateShow |-> designer};
			)
			pre dateShow.year = date.year and dateShow.month = date.month and dateShow.day = date.day and dateShow.hour >= date.hour and dateShow.minute >= date.minute and dateShow not in set dom program
			post dateShow in set dom program;
			
			-- Remove um designer do programa
			public removeDesignerFromProgramShow : Date ==> ()
			removeDesignerFromProgramShow(dateShow)==
			(
				program := {dateShow} <-: program;
			)
			pre dateShow in set dom program
			post dateShow not in set dom program;
			
			-- Retorna o designer para uma determinada data do programa
			public pure getDesignerByDate : (Date) ==> Fashion_Designer
			getDesignerByDate(dateShow) ==
			(
				return program(dateShow);
			)
			pre dateShow in set dom program;
			
			-- Retorna as datas do programa para um determinado designer
			public pure getListOfDatesByDesigner : (Fashion_Designer) ==> listOfDates
			getListOfDatesByDesigner(designer) ==
			(
				dcl m : map Date to Fashion_Designer := program :> {designer};
				dcl l : listOfDates := {};
				
				for all d in set dom m do l := l union {d};
				
				return l;
			)
			pre designer in set rng program;
			
			-- Adiciona um workshop ao show
			public addWorkShopToShow : WorkShop ==> ()
			addWorkShopToShow(WorkShop)==
			(
				workshops := workshops union {WorkShop};
			)
			pre WorkShop not in set workshops
			post WorkShop in set workshops;
			
			-- Remove um workshop ao show
			public rmvWorkShopToShow : WorkShop ==> ()
			rmvWorkShopToShow(WorkShop)==
			(
				workshops := workshops \ {WorkShop};
			)
			pre WorkShop in set workshops
			post WorkShop not in set workshops;
			
			-- Reservar um workshop
			public workShopBooking : WorkShop * Regular_User ==> ()
			workShopBooking(WorkShop, User) ==
			(
				WorkShop.addUserToWorkshop(User);
			)
			pre card WorkShop.getUsers() < WorkShop.getLotation();
			
			-- Editor adiciona a sua crítica ao show
			public addCritic : Reviewer * Critic ==> ()
			addCritic(Reviewer, Critic) ==
			(
				critics := critics ++ {Reviewer|->Critic};
			)
			pre Reviewer not in set dom critics
			post Reviewer in set dom critics;
			
			-- Editor remove a sua crítica ao show
			public rmvCritic : Reviewer ==> ()
			rmvCritic(Reviewer) ==
			(
				critics := {Reviewer} <-: critics;
			)
			pre Reviewer in set dom critics
			post Reviewer not in set dom critics;
			
			-- Média crítica ao show
			public getAvgReview : () ==> (real)
			getAvgReview() ==
			(
				dcl sum : real :=0;
				
				for all reviewer in set dom critics do
					sum := sum + critics(reviewer).rate;
				if (card dom critics > 0) then
					return sum / card dom critics
				else 
					return sum;
			);
			
			-- Verifica se data do modelo é compativel com a do designer a que está associado
			public pure checkModelDesignerDates : Fashion_Designer * Model_In_Runway ==> (bool)
			checkModelDesignerDates(designer,modelRw) ==
			(
				dcl l : listOfDates := getListOfDatesByDesigner(designer);
				for all i in set l do
					if (i.year = modelRw.getDate().year and i.month = modelRw.getDate().month and i.day = modelRw.getDate().day and modelRw.getDate().hour = i.hour and modelRw.getDate().minute = i.minute) then
						return true
					else
						return false
			);
			
			-- Verifica se data do modelo é posterior à data do último modelo na sequencia
			public pure checkModelsDates : Fashion_Designer * Model_In_Runway ==> (bool)
			checkModelsDates(designer,modelRw) ==
			(
				dcl l : listOfModels := models(designer);
				dcl m : Model_In_Runway := l(len l);
				
				if(modelRw.getDate().hour > m.getDate().hour or (modelRw.getDate().hour = m.getDate().hour and modelRw.getDate().minute > m.getDate().minute)) then
					return true
				else
					return false
			);

functions
-- TODO Define functiones here
			
			-- Retorna o número de dias do mês num dado ano
			public static DaysOfMonth(month,year : nat1) r : nat1 == (
				if month = 1 or month = 3 or month = 5 or month = 7 or month = 8 or month = 10 or month = 12 then
					31
				else if month = 2 and ((year mod 4 = 0 and year mod 100 <> 0) or year mod 400 = 0) then
					29
				else if month = 2 then
					28
				else
					30
			)

traces
-- TODO Define Combinatorial Test Traces here
end Fashion_Show